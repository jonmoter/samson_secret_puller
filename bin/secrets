#!/usr/bin/env ruby
require 'vault'

Vault.configure do |config|
	config.ssl_pem_file = '/vault-auth/pem'
	config.ssl_verify = false
	config.address = ENV.fetch("VAULT_ADDR", 'https://172.16.200.20:8200')

	# Timeout the connection after a certain amount of time (seconds)
	config.timeout = 5

	# It is also possible to have finer-grained controls over the timeouts, these
	# may also be read as environment variables
	config.ssl_timeout  = 3
	config.open_timeout = 3
	config.read_timeout = 2
end


class Secrets

	ENCODINGS = {"/": "%2F"}
	CERT_AUTH_PATH =  '/v1/auth/cert/login'.freeze
	PEM = File.read(Vault.ssl_pem_file)
	DEFAULT_OPTIONS = {
    use_ssl: true,
    verify_mode: 0,
	  cert: OpenSSL::X509::Certificate.new(PEM),
	  key: OpenSSL::PKey::RSA.new(PEM)
	}

	# to get a token from the api using the cert
	def initialize(http = nil)
	  uri = URI.parse(Vault.address)
    @http = Net::HTTP.start(uri.host, uri.port, DEFAULT_OPTIONS)
	  response = @http.request(Net::HTTP::Post.new(CERT_AUTH_PATH))
	  if (response.code.to_i == 200)
	    Vault.token = JSON.parse(response.body).delete("auth")["client_token"]
	  else
	    raise "Missing Token"
	  end
	end

	def read(key)
    result = Vault.logical.read(vault_path(key))
    result = result.to_h
    result = result.merge(result.delete(:data))
    # TODO: add some defensive code around here,
    # need to ensure that we can actually parse the JSON
    # needs to raise like crazy if it doesn't work so
    # it cna been seen in the k8s logs
    JSON.parse(result.delete(:vault))
	end

	private

	def vault_path(key)
  	"secret/" + convert_path(key, :encode)
	end

	def convert_path(string, direction)
  	string = string.dup
  	if direction == :decode
    	ENCODINGS.each { |k, v| string.gsub!(v.to_s, k.to_s) }
  	elsif direction == :encode
    	ENCODINGS.each { |k, v| string.gsub!(k.to_s, v.to_s) }
  	else
    	raise ArgumentError.new("direction is required")
  	end
  	string
	end

end


client = Secrets.new()

loop do
  client.read('truth_service/config').map do |file, contents|
    open("/secrets/#{file}", 'w') { |f| f.puts contents }
  end
  sleep 60
end
